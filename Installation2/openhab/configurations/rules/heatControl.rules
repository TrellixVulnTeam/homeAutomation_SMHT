import org.openhab.core.library.types.DecimalType
import org.openhab.core.library.types.*
import org.openhab.core.persistance.*
import org.openhab.model.script.actions.*


//-----------------------------------------------------------------------
// Rule to turn on/off a switch connected to a Heater.
//   ON : inside temperature gets below outside temperature
//   OFF: temperature is above a defined level
//        Inside temperature used : gSovhuset_Temperature
//        Outside temperature used : gTradgarden_Temperature
//
//   1. Fetch value of switch
//   2. if oldstate is ON do some checking
//   3. if oldstate is OFF do some checking
//
/-----------------------------------------------------------------------
rule "Sovhuset temperature adjuster"
when
    Item gSovHuset_Temperature received update
    or Item gTradgarden_Temperature received update
then
    
    var OnOffType existingState = Light_gSovHuset_SleepHouseFloorLamp.last.state as OnOffType
    var OnOffType newState = existingState
    var hysteresis = 2
    val tempIn  = gSovHuset_Temperature.last.state as DecimaType
    val tempOut = gTradgarden_Temperature.last.state as DecimaType

    if (existingState == ON)
    {
        if (tempIn >= tempOut + hysteresis)
        {
            newState = OFF
        }
    }
    else 
    {
        if (tempIn < tempOut - hysteresis)
        {
            newState = OFF
        }
    }
    
    if (oldState != existingState)
    {
        //postUpdate(Light_gSovHuset_SleepHouseFloorLamp.last.state as OnOffType)
        sendCommand(Light_gSovHuset_SleepHouseFloorLamp.last, newState)
        logInfo("House Temperature changed", "temperature below 10. Turn on heater 1. Temp: "+gHuset_Temperature.state)
    }
        
    //sendMail("bjorn.lonne@gmail.com","House Temperature warning", "Temperature in house below 10 degrees. Turning ON Heater 1. Temp:"+gHuset_Temperature.state)
            
end
