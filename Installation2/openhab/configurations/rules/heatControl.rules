import org.openhab.core.library.types.DecimalType
import org.openhab.core.library.types.*
import org.openhab.core.persistance.*
import org.openhab.model.script.actions.*

//-----------------------------------------------------------------------
// Rule to turn on/off a switch connected to a Heater.
//   ON : inside temperature gets below outside temperature
//   OFF: temperature is above a defined level
//        Inside temperature used : gSovhuset_Temperature
//        Outside temperature used : gTradgarden_Temperature
//
//   1. Fetch value of switch
//   2. if oldstate is ON do some checking
//   3. if oldstate is OFF do some checking
//
//-----------------------------------------------------------------------
rule "Sovhuset temperature adjuster"
when
    Item gSovHuset_Temperature received update
    or Item gTradgarden_Temperature received update
then
    
    var OnOffType existingState = Light_gSovHuset_SleepHouseFloorLamp.last.state as OnOffType
    var OnOffType newState = existingState
    var hysteresis = 2
    var DecimalType tempIn  = gSovHuset_Temperature.state as DecimalType
    var DecimalType tempOut = gTradgarden_Temperature.state as DecimalType

    if (existingState == ON)
    {
        logInfo("DEBUG 111111111111")
        if (tempIn >= tempOut + hysteresis)
        {
            logInfo("DEBUG 22222222222")
            newState = OFF
        }
    }
    else 
    {
        logInfo("DEBUG 3333333333333")

        if (tempIn < tempOut)
        {
            logInfo("DEBUG 44444444444")
            newState = ON
        }
    }
    
    if (newState != existingState)
    {
        logInfo("DEBUG 5555555555")
        //postUpdate(Light_gSovHuset_SleepHouseFloorLamp.state as OnOffType)
        sendCommand(Light_gSovHuset_SleepHouseFloorLamp, newState)
        sendMail("bjorn.lonne@gmail.com","Sleephouse Temperature warning", "Temperature inside below outside. Turning ON Heater 1. Temp:"+tempIn)
    }
end
